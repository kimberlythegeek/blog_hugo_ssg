<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Kimberly the Geek</title>
    <link>http://www.kimberlythegeek.com/categories/python/</link>
    <description>Recent content in Python on Kimberly the Geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Jul 2017 16:26:36 +0000</lastBuildDate>
    
	<atom:link href="http://www.kimberlythegeek.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mozilla Internship: Translate Java to Python, Pt. 2</title>
      <link>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-2/</link>
      <pubDate>Tue, 25 Jul 2017 16:26:36 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-2/</guid>
      <description>Continued from Part 1
While I began writing my package as a direct, one-to-one translation of the Java package, my package turned out to look very different.
Java and Python are, after all, very different languages. I found some methods to be unnecessary in python, and chose to not use the same design pattern as axe-selenium-java.
The Java package, written by Deque Labs, uses the Builder design pattern.
I wrote the methods used by the Builder class to be methods of the Axe class instead.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Translate Java to Python, Pt. 1</title>
      <link>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-1/</link>
      <pubDate>Tue, 11 Jul 2017 15:30:26 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-1/</guid>
      <description>Translating a Java package into Python This is a pretty interesting task for me, to translate Java to Python, and is currently my focus in the internship. What I have found so far is that most of the methods will be much easier to implement in Python than in Java.
I&#39;m glad I&#39;m interpreting Java into Python...and not the reverse!

Take, for example, the get_contents() function:
AXE.java
[java]
private static String getContents(final URL script) {</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Diving into Test Automation with Python</title>
      <link>http://www.kimberlythegeek.com/posts/test-automation-python/</link>
      <pubDate>Sun, 25 Jun 2017 17:30:55 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/test-automation-python/</guid>
      <description>Test Automation with Python The first week of my internship was spent primarily setting up my dev environment on the laptop I received.
I had also never used a Mac before, so there were some basics to learn as well.
Although, since MacOS is Unix-based now, all of the important things were pretty much the same.
(I&#39;m worthless with a Windows command line)
Once I had everything configured, I started fiddling with python and pytest.</description>
    </item>
    
    <item>
      <title>Scrape Stack Overflow Jobs Using Scrapy | Python Tutorial</title>
      <link>http://www.kimberlythegeek.com/posts/scrape-stack-overflow-jobs/</link>
      <pubDate>Fri, 10 Feb 2017 09:35:35 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/scrape-stack-overflow-jobs/</guid>
      <description>1. What the Hell is Scraping, Anyway?
2. Install Scrapy
3. Write Your First Script
4. Put It To Work!  For this tutorial, we&#39;re going to write a Web Spider to scrape Stack Overflow Jobs. 1. What the Hell is Scraping, Anyway?  Web scraping (web harvesting or web data extraction) is data scraping used for extracting data from websites. Web scraping software may access the World Wide Web directly using the Hypertext Transfer Protocol, or through a web browser.</description>
    </item>
    
    <item>
      <title>Python Virtual Environments</title>
      <link>http://www.kimberlythegeek.com/posts/python-virtual-environments/</link>
      <pubDate>Fri, 27 Jan 2017 15:42:53 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/python-virtual-environments/</guid>
      <description>Why Should I Use Python Virtual Environments? It is always recommended to use python virtual environments for all of your projects. But why?
As The Hitchhiker&#39;s Guide to Python says:
 A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them.
It solves the &amp;ldquo;Project X depends on version 1.x but, Project Y needs 4.x&amp;rdquo; dilemma, and keeps your global site-packages directory clean and manageable.</description>
    </item>
    
  </channel>
</rss>