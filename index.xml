<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kimberly the Geek</title>
    <link>http://www.kimberlythegeek.com/</link>
    <description>Recent content on Kimberly the Geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Jun 2018 13:39:02 -0600</lastBuildDate>
    
	<atom:link href="http://www.kimberlythegeek.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://www.kimberlythegeek.com/about/</link>
      <pubDate>Mon, 25 Jun 2018 13:39:02 -0600</pubDate>
      
      <guid>http://www.kimberlythegeek.com/about/</guid>
      <description>// TO DO</description>
    </item>
    
    <item>
      <title>Air Mozilla Presentation - Automating Web Accessibility Testing</title>
      <link>http://www.kimberlythegeek.com/posts/mozilla-automating-accessibility-testing/</link>
      <pubDate>Thu, 30 Nov 2017 08:57:55 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/mozilla-automating-accessibility-testing/</guid>
      <description>To conclude my internship with Mozilla, I did a video presentation on Air Mozilla. This is a high-level overview  of the solution I designed to automate accessibility testing.
Below are the slides, followed by the transcript and video.

Automating Web Accessibility Testing Hi, my name is Kimberly Sereduck. I recently completed an internship with Mozilla through the GNOME Outreachy program. As part of the test engineering team, the goal of my internship was to automate web accessibility testing.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Conclusion and Retrospective</title>
      <link>http://www.kimberlythegeek.com/posts/mozilla-internship-retrospective/</link>
      <pubDate>Mon, 04 Sep 2017 09:08:50 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/mozilla-internship-retrospective/</guid>
      <description>A Conclusion to My Internship When I began this internship three months ago, neither myself nor my mentor had a clear picture of what I would produce, or how the goals of the project would change as time progressed.
The high-level goal of the internship was clear: to automate web accessibility testing. How best to do this, however, was not.
The first few weeks, as well as the weeks prior, were mostly spent on research.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Writing a pytest Fixture</title>
      <link>http://www.kimberlythegeek.com/posts/writing-a-pytest-fixture/</link>
      <pubDate>Mon, 21 Aug 2017 16:00:09 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/writing-a-pytest-fixture/</guid>
      <description>Writing a pytest fixture was actually much easier to do than I expected.
I did find, however, that the documentation on custom pytest fixtures was not very applicable to my situation.
I instead spent quite a lot of time looking at other pytest fixtures, such as pytest-html, pytest-selenium, and pytest-base-url, trying to figure out how they worked.
Having never used pytest fixtures&amp;mdash;and being new to pytest&amp;mdash;it was a bit of a struggle for me to really understand what was going on.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Writing a pip Installable Package</title>
      <link>http://www.kimberlythegeek.com/posts/mozilla-internship-writing-pip-installable-package/</link>
      <pubDate>Sun, 13 Aug 2017 16:46:01 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/mozilla-internship-writing-pip-installable-package/</guid>
      <description>Designing for the User The first part of this project was to create a rough draft of the package, and a set of both unit tests and integration tests.
For the first several weeks, I only used the package locally from the project folder, which turned out to be much easier than writing a working, pip-installable package.
So that was the next goal to accomplish&amp;mdash;but I also wanted to ensure to follow best practices and maintain stability.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Translate Java to Python, Pt. 2</title>
      <link>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-2/</link>
      <pubDate>Tue, 25 Jul 2017 16:26:36 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-2/</guid>
      <description>Continued from Part 1
While I began writing my package as a direct, one-to-one translation of the Java package, my package turned out to look very different.
Java and Python are, after all, very different languages. I found some methods to be unnecessary in python, and chose to not use the same design pattern as axe-selenium-java.
The Java package, written by Deque Labs, uses the Builder design pattern.
I wrote the methods used by the Builder class to be methods of the Axe class instead.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Translate Java to Python, Pt. 1</title>
      <link>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-1/</link>
      <pubDate>Tue, 11 Jul 2017 15:30:26 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/translate-java-to-python-pt-1/</guid>
      <description>Translating a Java package into Python This is a pretty interesting task for me, to translate Java to Python, and is currently my focus in the internship. What I have found so far is that most of the methods will be much easier to implement in Python than in Java.
I&#39;m glad I&#39;m interpreting Java into Python...and not the reverse!

Take, for example, the get_contents() function:
AXE.java
[java]
private static String getContents(final URL script) {</description>
    </item>
    
    <item>
      <title>Mozilla Internship: Diving into Test Automation with Python</title>
      <link>http://www.kimberlythegeek.com/posts/test-automation-python/</link>
      <pubDate>Sun, 25 Jun 2017 17:30:55 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/test-automation-python/</guid>
      <description>Test Automation with Python The first week of my internship was spent primarily setting up my dev environment on the laptop I received.
I had also never used a Mac before, so there were some basics to learn as well.
Although, since MacOS is Unix-based now, all of the important things were pretty much the same.
(I&#39;m worthless with a Windows command line)
Once I had everything configured, I started fiddling with python and pytest.</description>
    </item>
    
    <item>
      <title>Mozilla Internship: An Introduction to Web Accessibility</title>
      <link>http://www.kimberlythegeek.com/posts/intro-web-accessibility/</link>
      <pubDate>Sun, 11 Jun 2017 21:18:57 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/intro-web-accessibility/</guid>
      <description>Introduction to Web Accessibility Outreachy Some background: GNOME&#39;s Outreachy internship program is targeted at underrepresented groups in tech.
A variety of open-source companies are involved.
An employee of those companies can volunteer to be a mentor, and they design an internship with a particular topic and goal.
Those who are both interested and eligible submit applications for that internship.
The goal of the internship I was selected for is to automate regression testing for web accessibility.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-7/</link>
      <pubDate>Thu, 16 Feb 2017 10:31:38 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-7/</guid>
      <description> _________________________________________ ( If one cannot enjoy reading a book over ) ( and over again, there is no use in ) ( reading it at all. ) ( ) ( -- Oscar Wilde ) ----------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>Scrape Stack Overflow Jobs Using Scrapy | Python Tutorial</title>
      <link>http://www.kimberlythegeek.com/posts/scrape-stack-overflow-jobs/</link>
      <pubDate>Fri, 10 Feb 2017 09:35:35 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/scrape-stack-overflow-jobs/</guid>
      <description>1. What the Hell is Scraping, Anyway?
2. Install Scrapy
3. Write Your First Script
4. Put It To Work!  For this tutorial, we&#39;re going to write a Web Spider to scrape Stack Overflow Jobs. 1. What the Hell is Scraping, Anyway?  Web scraping (web harvesting or web data extraction) is data scraping used for extracting data from websites. Web scraping software may access the World Wide Web directly using the Hypertext Transfer Protocol, or through a web browser.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-6/</link>
      <pubDate>Fri, 03 Feb 2017 05:39:24 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-6/</guid>
      <description> ______________________________________ ( You look like a million dollars. All ) ( green and wrinkled. ) -------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>Python Virtual Environments</title>
      <link>http://www.kimberlythegeek.com/posts/python-virtual-environments/</link>
      <pubDate>Fri, 27 Jan 2017 15:42:53 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/python-virtual-environments/</guid>
      <description>Why Should I Use Python Virtual Environments? It is always recommended to use python virtual environments for all of your projects. But why?
As The Hitchhiker&#39;s Guide to Python says:
 A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them.
It solves the &amp;ldquo;Project X depends on version 1.x but, Project Y needs 4.x&amp;rdquo; dilemma, and keeps your global site-packages directory clean and manageable.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-5/</link>
      <pubDate>Thu, 26 Jan 2017 13:03:27 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-5/</guid>
      <description> ________________________________________ ( Just because the message may never be ) ( received does not mean it is not worth ) ( sending. ) ---------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>AngularJS Wikipedia Search App - Part Two</title>
      <link>http://www.kimberlythegeek.com/posts/angularjs-wikipedia-search-pt-2/</link>
      <pubDate>Wed, 25 Jan 2017 12:00:21 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/angularjs-wikipedia-search-pt-2/</guid>
      <description>Continued from Part One

Build a Wikipedia Search App With AngularJS Part Two - Use Output So, if everything went as expected in the first part, you should be getting output in your console.
Now we need to actually display the output on the page.
The JavaScript We first need to modify our app so that it does something with the data besides printing to the console.
[js]
// app.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-4/</link>
      <pubDate>Fri, 20 Jan 2017 10:22:20 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-4/</guid>
      <description> __________________________________ ( You will pass away very quickly. ) ---------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>AngularJS Wikipedia Search App - Part One</title>
      <link>http://www.kimberlythegeek.com/posts/angularjs-wikipedia-search-pt-1/</link>
      <pubDate>Mon, 16 Jan 2017 15:11:39 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/angularjs-wikipedia-search-pt-1/</guid>
      <description>Build a Wikipedia Search App With AngularJS Part One - Get Output In the previous post, I showed how to make unauthenticated API requests to the Wikipedia API.
In this tutorial, I&#39;m going to rebuild the Wikipedia Search App using AngularJS.
Here&#39;s what we&#39;re going to start with:
[js]
// app.js
(function(){
&#39;use strict&#39;;
 angular.module(&#39;wikipediaApp&#39;, [])
.constant(&#39;API_PATH&#39;, &#39;https://en.wikipedia.org/w/api.php&#39;)
.controller(&#39;SearchController&#39;, SearchController);
 SearchController.$inject = [&#39;$scope&#39;, &#39;$http&#39;, &#39;API_PATH&#39;];
function SearchController($scope, $http, API_PATH){</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-3/</link>
      <pubDate>Tue, 10 Jan 2017 07:21:02 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-3/</guid>
      <description> ________________________________________ ( For a light heart lives long. ) ( ) ( -- Shakespeare, &#34;Love&#39;s Labour&#39;s Lost&#34; ) ---------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>How the #$@&amp; Do I Use an API?! - Wikipedia API Basics</title>
      <link>http://www.kimberlythegeek.com/posts/wikipedia-api-basics/</link>
      <pubDate>Thu, 05 Jan 2017 15:49:08 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/wikipedia-api-basics/</guid>
      <description>Wikipedia API Basics 1. So... What&#39;s an API?
2. There&#39;s an API For That!
3. Okay, I Know What an API Is...Now What?
4. Let&#39;s Do It!
5. It worked! (Hopefully)


How the #$@&amp; Do I Use an API?! I&#39;m taking a break from the WordPress development topic to delve into APIs. (Yay!)
I&#39;ll be using the Wikipedia API for this example.
1. So... What&#39;s an API? APIs&amp;#8212;application programming interfaces&amp;#8212;are the current standard in utilizing information and technologies on the web.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink-2/</link>
      <pubDate>Sat, 31 Dec 2016 06:47:35 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink-2/</guid>
      <description> _____________________________________ ( You will be audited by the Internal ) ( Revenue Service. ) ------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>Custom Sidebar - Child Themes in Wordpress</title>
      <link>http://www.kimberlythegeek.com/posts/custom-sidebar-wordpress/</link>
      <pubDate>Thu, 29 Dec 2016 15:26:18 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/custom-sidebar-wordpress/</guid>
      <description>1. Register Custom Sidebar in functions.php
2. Create Custom Sidebar File
3. Call Custom Sidebar!
4. Style as Desired

The nice thing about child themes is that it gives you a full theme as a base, while also allowing for endless customization.
Any file that you write in your child theme, e.g. functions.php, header.php, sidebar.php, will overwrite the parent theme&#39;s file.
It&#39;s worth mentioning that this doesn&#39;t seem to be working on my local WordPress install, with theme Twenty Seventeen.</description>
    </item>
    
    <item>
      <title>fortune | cowthink</title>
      <link>http://www.kimberlythegeek.com/posts/fortune-cowthink/</link>
      <pubDate>Thu, 29 Dec 2016 07:26:56 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/fortune-cowthink/</guid>
      <description> ________________________________________ ( Q: Why haven&#39;t you graduated yet? A: ) ( Well, Dad, I could have finished years ) ( ago, but I wanted ) ( ) ( my dissertation to rhyme. ) ---------------------------------------- o ^__^ o (oo)\_______ (__)\ )\/\ ||----w | || ||  </description>
    </item>
    
    <item>
      <title>Child Themes in Wordpress - Getting Started</title>
      <link>http://www.kimberlythegeek.com/posts/creating-child-themes-wordpress/</link>
      <pubDate>Tue, 27 Dec 2016 15:56:16 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/creating-child-themes-wordpress/</guid>
      <description>The Basics of Child Themes There are many reasons why you should create child themes when using any customization. If you modify the CSS or PHP directly in a Wordpress theme, and later update the theme, all of your changes will be lost.
With child themes, you can update the parent themes without overwriting your custom styles.

I prefer to use a theme released directly from Wordpress.org, such as Twenty Fourteen, Twenty Fifteen, Twenty Sixteen, etc.</description>
    </item>
    
    <item>
      <title>Install Wordpress on Linux (Debian/CentOS)</title>
      <link>http://www.kimberlythegeek.com/posts/install-wordpress-linux/</link>
      <pubDate>Sun, 25 Dec 2016 06:20:16 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/install-wordpress-linux/</guid>
      <description>How to Install Wordpress on Linux 1. Ensure You Have a LAMP Stack Configured (Linux, Apache MySQL, PHP)
2. Download &amp;amp; Extract Wordpress
3. Create a new database for Wordpress
4. Give Wordpress Proper Permissions
5. Install Wordpress

1. Ensure You Have a LAMP Stack Configured (Linux, Apache, MySQL, PHP) If you aren&#39;t sure if you have Apache, MySQL, and PHP on your system, verifying this is pretty easy.</description>
    </item>
    
    <item>
      <title>Setting up a LAMP Stack (Linux, Apache, MySQL, PHP)</title>
      <link>http://www.kimberlythegeek.com/posts/setting-lamp-stack/</link>
      <pubDate>Fri, 23 Dec 2016 19:26:37 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/setting-lamp-stack/</guid>
      <description>1. Install Apache
2. Install MySQL
3. Install PHP
4. Verify LAMP Stack

1. Install Apache  Install the package:
Debian/Ubuntu
sudo apt-get install apache2 Fedora/CentOS/SUSE Systems
yum install httpd And start the service:
sudo service apache2 start or
sudo service httpd start &amp;nbsp;
2. Install MySQL  Debian/Ubuntu
$ sudo apt-get install mysql-server$ sudo mysql_secure_installation$ sudo mysql_install_db$ sudo service mysql start CentOS/Fedora/SUSE
$ sudo yum install mysql-server$ sudo service mysqld start$ sudo /usr/bin/mysql_secure_installation The mysql_secure_installation command runs the setup for MySQL.</description>
    </item>
    
    <item>
      <title>What Makes a Great Software Developer?</title>
      <link>http://www.kimberlythegeek.com/posts/what-makes-a-great-software-developer/</link>
      <pubDate>Wed, 02 Nov 2016 17:58:41 +0000</pubDate>
      
      <guid>http://www.kimberlythegeek.com/posts/what-makes-a-great-software-developer/</guid>
      <description>Work Ethic? Teamwork? Communication? These are some of the most cited skills on r&amp;eacute;sum&amp;eacute;s, and traits all employers look for when hiring. This is true, whether they&#39;re looking for a Database Administrator or a cashier.
So what skills are more specific to software development?
What distinguishes a good software developer from a great one?
&amp;nbsp;
It all begins with one&#39;s Standard of Quality.
Truth be told, as long as they put the time and effort into it, most anyone can learn to code.</description>
    </item>
    
  </channel>
</rss>